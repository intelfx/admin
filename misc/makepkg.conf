#!/hint/bash
# shellcheck disable=2034

#
# /etc/makepkg.conf
#

#########################################################################
# SOURCE ACQUISITION
#########################################################################
#
#-- The download utilities that makepkg should use to acquire sources
#  Format: 'protocol::agent'
DLAGENTS=('file::/usr/bin/curl -qgC - -o %o %u'
          'ftp::/usr/bin/curl -qgfC - --ftp-pasv --retry 3 --retry-delay 3 -o %o %u'
          'http::/usr/bin/curl -qgb "" -fLC - --retry 3 --retry-delay 3 -o %o %u'
          'https::/usr/bin/curl -qgb "" -fLC - --retry 3 --retry-delay 3 -o %o %u'
          'rsync::/usr/bin/rsync --no-motd -z %u %o'
          'scp::/usr/bin/scp -C %u %o')

# Other common tools:
# /usr/bin/snarf
# /usr/bin/lftpget -c
# /usr/bin/wget

#-- The package required by makepkg to download VCS sources
#  Format: 'protocol::package'
VCSCLIENTS=('bzr::breezy'
            'fossil::fossil'
            'git::git'
            'hg::mercurial'
            'svn::subversion')

#########################################################################
# ARCHITECTURE, COMPILE FLAGS
#########################################################################
#
CARCH="x86_64"
CHOST="x86_64-pc-linux-gnu"

#-- Compiler and Linker Flags
#CPPFLAGS=""
CFLAGS="-march=native -O2 -pipe -fno-plt -fexceptions \
        -Wp,-D_FORTIFY_SOURCE=3 -Wformat -Werror=format-security \
        -fstack-clash-protection -fcf-protection \
        -fuse-ld=mold"
CXXFLAGS="$CFLAGS -Wp,-D_GLIBCXX_ASSERTIONS"
LDFLAGS="-Wl,-O1 -Wl,--sort-common -Wl,--as-needed -Wl,-z,relro -Wl,-z,now \
         -Wl,-z,pack-relative-relocs -fuse-ld=mold"
RUSTFLAGS="-C target-cpu=native -C opt-level=3 \
           -C link-arg=-Wl,-O1,--sort-common,--as-needed,-z,relro,-z,now,-z,pack-relative-relocs \
           -C link-arg=-fuse-ld=lld"
#-- LTO flags
LTOFLAGS="-flto=auto -fuse-linker-plugin"
#LTOFLAGS="-flto -flto-partition=none -fuse-linker-plugin"
LTO_RUSTFLAGS="-C linker=clang -C linker-plugin-lto"
#               -C link-arg=-fuse-ld=mold -C link-arg=-Wl,plugin,/usr/lib/LLVMgold.so"
LTO_CARGOFLAGS="CARGO_PROFILE_RELEASE_LTO=thin"
#LTO_CARGOFLAGS="CARGO_PROFILE_RELEASE_LTO=fat CARGO_PROFILE_RELEASE_CODEGEN_UNITS=1"
#-- Make Flags: change this for DistCC/SMP systems
#MAKEFLAGS="-j$(nproc)"
#-- Debugging flags
DEBUG_CFLAGS="-fno-omit-frame-pointer -mno-omit-leaf-frame-pointer -Og -ggdb3"
#DEBUG_CFLAGS="-fno-omit-frame-pointer -mno-omit-leaf-frame-pointer -g"
DEBUG_CXXFLAGS="$DEBUG_CFLAGS"
DEBUG_RUSTFLAGS="-C force-frame-pointers=yes -C debuginfo=2"
DEBUG_CARGOFLAGS="CARGO_PROFILE_RELEASE_DEBUG=full"

#########################################################################
# BUILD ENVIRONMENT
#########################################################################
#
# Makepkg defaults: BUILDENV=(!distcc !color !ccache check !sign)
#  A negated environment option will do the opposite of the comments below.
#
#-- distcc:   Use the Distributed C/C++/ObjC compiler
#-- color:    Colorize output messages
#-- ccache:   Use ccache to cache C/C++ compilation
#-- sccache:  Use sccache to cache Rust compilation
#-- check:    Run the check() function if present in the PKGBUILD
#-- sign:     Generate PGP signature file
#
BUILDENV=(!distcc color !ccache !sccache check !sign)
#
#-- If using DistCC, your MAKEFLAGS will also need modification. In addition,
#-- specify a space-delimited list of hosts running in the DistCC cluster.
#DISTCC_HOSTS=""
#
#-- Specify a directory for package building.
: "${BUILDDIR=/var/tmp/makepkg}"

#########################################################################
# GLOBAL PACKAGE OPTIONS
#   These are default values for the options=() settings
#########################################################################
#
# Makepkg defaults: OPTIONS=(!strip docs libtool staticlibs emptydirs !zipman !purge !debug !lto !autodeps)
#  A negated option will do the opposite of the comments below.
#
#-- strip:      Strip symbols from binaries/libraries
#-- docs:       Save doc directories specified by DOC_DIRS
#-- libtool:    Leave libtool (.la) files in packages
#-- staticlibs: Leave static library (.a) files in packages
#-- emptydirs:  Leave empty directories in packages
#-- zipman:     Compress manual (man and info) pages in MAN_DIRS with gzip
#-- purge:      Remove files specified by PURGE_TARGETS
#-- debug:      Add debugging flags as specified in DEBUG_* variables
#-- lto:        Add compile flags for building with link time optimization
#-- autodeps:   Automatically add depends/provides
#
OPTIONS=(strip docs !libtool !staticlibs emptydirs zipman purge !debug lto)

#-- File integrity checks to use. Valid: md5, sha1, sha224, sha256, sha384, sha512, b2
INTEGRITY_CHECK=(sha256)
#-- Options to be used when stripping binaries. See `man strip' for details.
STRIP_BINARIES="--strip-all"
#-- Options to be used when stripping shared libraries. See `man strip' for details.
STRIP_SHARED="--strip-unneeded"
#-- Options to be used when stripping static libraries. See `man strip' for details.
STRIP_STATIC="--strip-debug"
#-- Manual (man and info) directories to compress (if zipman is specified)
MAN_DIRS=({usr{,/local}{,/share},opt/*}/{man,info})
#-- Doc directories to remove (if !docs is specified)
DOC_DIRS=(usr/{,local/}{,share/}{doc,gtk-doc} opt/*/{doc,gtk-doc})
#-- Files to be removed from all packages (if purge is specified)
PURGE_TARGETS=(usr/{,share}/info/dir .packlist *.pod)
#-- Directory to store source code in for debug packages
DBGSRCDIR="/usr/src/debug"
#-- Prefix and directories for library autodeps
LIB_DIRS=('lib:usr/lib' 'lib32:usr/lib32')

#########################################################################
# PACKAGE OUTPUT
#########################################################################
#
# Default: put built package and cached source in build directory
#
#-- Destination: specify a fixed directory where all packages will be placed
PKGDEST=/srv/build/pkg
#-- Source cache: specify a fixed directory where source files will be cached
SRCDEST=/srv/build/src
#-- Source packages: specify a fixed directory where all src packages will be placed
SRCPKGDEST=/srv/build/srcpkg
#-- Log files: specify a fixed directory where all log files will be placed
LOGDEST=/srv/build/log
#-- Packager: name/email of the person or organization building packages
PACKAGER="Ivan Shapovalov <intelfx@intelfx.name>"
#-- Specify a key to use for package signing
#GPGKEY=""

#########################################################################
# COMPRESSION DEFAULTS
#########################################################################
#
COMPRESSGZ=(gzip -c -f -n)
COMPRESSBZ2=(bzip2 -c -f)
COMPRESSXZ=(xz -c -z -)
COMPRESSZST=(zstd -c -T0 -3 -)
COMPRESSLRZ=(lrzip -q)
COMPRESSLZO=(lzop -q)
COMPRESSZ=(compress -c -f)
COMPRESSLZ4=(lz4 -q)
COMPRESSLZ=(lzip -c -f)

#########################################################################
# EXTENSION DEFAULTS
#########################################################################
#
PKGEXT='.pkg.tar.zst'
SRCEXT='.src.tar.zst'

#########################################################################
# OTHER
#########################################################################
#
#-- Command used to run pacman as root, instead of trying sudo and su
#PACMAN_AUTH=()

#########################################################################
# XXX(intelfx)
#########################################################################

#
# Cleanup extra whitespace in $*FLAGS
#
opts=$(shopt -p extglob ||:); shopt -s extglob
for var in $(compgen -A variable -X '!*FLAGS'); do declare -g "$var"="${!var//+( )/ }"; done
eval $opts; unset var opts

#
# $MAKEFLAGS
#
if [[ $MAKEJOBS ]]; then
	echo "makepkg.conf: external override: total $MAKEJOBS jobs" >&2
elif [[ "$DISTCC_HOSTS" ]]; then
	MAKEJOBS=0
	for w in $DISTCC_HOSTS; do
		if [[ $w =~ ^--localslots ]]; then
			j=0
		elif [[ $w =~ /([0-9]+) ]]; then
			j="${BASH_REMATCH[1]}"
		elif [[ $w =~ ^localhost ]]; then
			j=2
		else
			j=4
		fi
		(( MAKEJOBS += j ))
	done
	echo "makepkg.conf: distcc: total $MAKEJOBS jobs" >&2
	if ! [[ "$DISTCC_FALLBACK" ]]; then
		export DISTCC_FALLBACK=0
		echo "makepkg.conf: distcc: implicitly disabling fallback" >&2
	fi
else
	MAKEJOBS="$(nproc)"
	#echo "makepkg.conf: non-distcc: total $MAKEJOBS jobs" >&2
fi
if ! [[ $MAKEFLAGS ]]; then
	export MAKEFLAGS="-j$MAKEJOBS"
fi
if ! [[ $NINJAFLAGS ]]; then
	export NINJAFLAGS="-j$MAKEJOBS"
fi

#
# $BUILDENV override for distcc
#
if [[ "$DISTCC_HOSTS" ]]; then
	BUILDENV[0]=(distcc)
fi

#
# $BUILDDIR
#
# Parse $MAKEPKG_HERE and unset $*DEST/$*DIR
if [[ $MAKEPKG_HERE ]]; then
	unset PKGDEST SRCDEST SRCPKGDEST LOGDEST BUILDDIR
fi
# Set ccache's basedir appropriately
export CCACHE_BASEDIR="${BUILDDIR:-$PWD}"

# Do not leak a non-default $CMAKE_GENERATOR for benefit of broken PKGBUILDs
# that hardcode `make`
unset CMAKE_GENERATOR

# It's 2024 and Go(vno) still thinks it owns the entire machine. Wrong.
export GOMODCACHE="${XDG_CACHE_HOME-"$HOME/.cache"}/go-mod"

# Normalize git commit metadata to make merges in prepare() deterministic
export \
	GIT_AUTHOR_NAME="makepkg" \
	GIT_AUTHOR_EMAIL="makepkg@localhost.localdomain" \
	GIT_COMMITTER_NAME="makepkg" \
	GIT_COMMITTER_EMAIL="makepkg@localhost.localdomain" \
	GIT_AUTHOR_DATE='@0 +0000' \
	GIT_COMMITTER_DATE='@0 +0000' \

# vim: set ft=bash ts=8 sw=8 noet:
